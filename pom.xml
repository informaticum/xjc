<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>de.informaticum.xjc</groupId>
  <artifactId>xjc-plugins</artifactId>
  <version>2.0.1-SNAPSHOT</version>

  <name>Informaticum's XJC Plug-Ins</name>
  <description>This project offers some XJC plug-ins to be used in conjunction with JAXB/JAX-WS (XSD-/WSDL-based) code generation.</description>
  <url>https://github.com/informaticum/xjc/</url>
  <inceptionYear>2021</inceptionYear>

  <licenses>
    <license>
      <name>MIT License</name>
      <comments>See LICENSE.md for details.</comments>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>SGA</id>
      <name>Stefan Gasterstädt</name>
      <email>stefan@gasterstädt.de</email>
      <url>http://stefan.gasterstädt.de</url>
      <organization>Informaticum</organization>
      <organizationUrl>http://informaticum.de/</organizationUrl>
      <timezone>Europe/Berlin</timezone>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git@github.com:informaticum/xjc.git</connection>
    <developerConnection>scm:git:informaticum@github.com:informaticum/xjc.git</developerConnection>
    <url>https://github.com/informaticum/xjc/</url>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <properties>
      <!-- Project Properties -->
    <version.java>11</version.java>
    <version.maven>3.6.3</version.maven>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- Dependency Versions -->
    <version.apache-codegen>4.0.3</version.apache-codegen>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <!--
         ! The Apache CXF CodeGen Plug-In shall be used as a bill-of-materials (BOM) in order to depend on the exact
         ! same versions of all 3rd-party libraries as used when running the CXF-based code generation.
         !-->
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-codegen-plugin</artifactId>
        <version>${version.apache-codegen}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <!--
       ! Because this project is used in the context of an XJC execution, the "jaxb-xjc" dependency can be scoped as
       ! "provided". This prevents version clashes in case when using this project in the context of a more up-to-date
       ! setup. (However, this dependency must be provided at runtime which is assumed to be the usual case.)  
       !-->
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-xjc</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!--
       ! This project hardens the internal assumptions using the AssertJ expressions. So, this dependency must be
       ! referred as "compile" scoped.
       !-->
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <!--
       ! This project is linked against the slf4j API. In result, the specific execution context must provide a specific
       ! implementation dependency, e.g., "logback-classic". (Unless such implementation dependency is provided, no
       ! logging messages will be seen.
       !-->
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <!--
       ! Yes, tests are written in JUnit 4. Oldie but goldie ;-)
       !-->
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>gpg-signing</id>
      <activation>
        <property>
          <!--
           ! If this property is given, it obviously is intended to be used by the GPG plug-in. Thus, the existence is
           ! used to automatically activate that plug-in without the need of any further verbosity (e.g., specifying a
           ! profile).
           !-->
          <name>gpg.keyname</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <!-- Manage this plug-in only; It will be activated conditionally (by according profile). --> 
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>3.1.0</version>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>verify</phase>
              <goals>
                <goal>sign</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!--:-:-:-:-:-:-:-:-:-:-:-:-:-:- [1/3] CLEAN LIFECYCLE -:-:-:-:-:-:-:-:-:-:-:-:-:-:-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.3.1</version>
        <configuration>
          <failOnError>true</failOnError>
        </configuration>
      </plugin>
      <!--:-:-:-:-:-:-:-:-:-:-:-:-:-:- [2/3] DEFAULT LIFECYCLE -:-:-:-:-:-:-:-:-:-:-:-:-:-:-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <compilerArgs>
            <compilerArg>-Xlint:all</compilerArg>
          </compilerArgs>
          <source>${version.java}</source>
          <target>${version.java}</target>
          <testSource>${version.java}</testSource>
          <testTarget>${version.java}</testTarget>
          <encoding>${project.build.sourceEncoding}</encoding>
          <failOnError>true</failOnError>
          <showDeprecation>true</showDeprecation>
          <showWarnings>true</showWarnings>
          <optimize>true</optimize>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <!-- Do not fail, because everything is managed. Just give a little information. -->
          <failOnWarning>false</failOnWarning>
        </configuration>
        <executions>
          <execution>
            <id>analyse-dependencies</id>
            <goals>
              <goal>analyze-only</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <deployAtEnd>true</deployAtEnd>
          <!--
           ! In case of a release deployment you definitively should enable the "updateReleaseInfo" parameter in order
           ! to cause the according metadata update (making the artifact a release version).
           !  + http://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html#updateReleaseInfo
           !  + https://support.sonatype.com/hc/en-us/articles/213464638-Why-are-the-latest-and-release-tags-in-maven-metadata-xml-not-being-updated-after-deploying-artifacts-
           !
           ! Activation can be done (a) by an additional user-defined profile, (b) by reusing the existing
           ! "release-profile" of the super-POM, or (c) by setting the parameter via maven execution with
           ! "-DupdateReleaseInfo=true".
           !  + http://maven.apache.org/ref/3-LATEST/maven-model-builder/super-pom.html
           ! Since the same parameter is used by maven-install-plugin too, version (c) should be preferred.
           !  + http://maven.apache.org/plugins/maven-install-plugin/install-mojo.html#updateReleaseInfo
           !  + http://maven.apache.org/plugins/maven-install-plugin/examples/update-release-info.html
           !-->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.4.1</version>
        <executions>
          <execution>
            <id>enforce-project-assumptions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <dependencyConvergence />
                <requireJavaVersion>
                  <message>Java version must be at least version ${version.java}!</message>
                  <version>${version.java}</version>
                </requireJavaVersion>
                <requireMavenVersion>
                  <message>Maven version must be at least version ${version.maven}!</message>
                  <version>${version.maven}</version>
                </requireMavenVersion>
                <requirePluginVersions>
                  <message>Plugin versions must be specified!</message>
                </requirePluginVersions>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <installAtEnd>true</installAtEnd>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <forceCreation>true</forceCreation>
          <archive>
            <manifest>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <tags>
            <!-- tag><name>apiNote</name><placement>a</placement><head>API Note:</head></tag -->
            <tag><name>implSpec</name><placement>a</placement><head>Implementation Requirements:</head></tag>
            <tag><name>implNote</name><placement>a</placement><head>Implementation Note:</head></tag>
            <tag><name>param</name></tag>
            <tag><name>return</name></tag>
            <tag><name>throws</name></tag>
            <tag><name>since</name></tag>
            <tag><name>version</name></tag>
            <tag><name>serialData</name></tag>
            <tag><name>see</name></tag>
          </tags>
          <overview>${project.basedir}/src/main/javadoc/overview.html</overview>
          <encoding>${project.build.sourceEncoding}</encoding>
          <docencoding>${project.reporting.outputEncoding}</docencoding>
          <doclint>all</doclint>
          <failOnError>true</failOnError>
          <level>protected</level>
          <show>protected</show>
          <serialwarn>true</serialwarn>
          <validateLinks>true</validateLinks>
          <detectLinks>false</detectLinks>
          <detectJavaApiLink>true</detectJavaApiLink>
        </configuration>
        <executions>
          <execution>
            <id>generate-javadoc-jar</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <includePom>false</includePom>
        </configuration>
        <executions>
          <execution>
            <id>generate-sources-jar</id>
            <goals>
              <!--
               ! To prevent multiple executions of several Maven phases, the non-forking version of this plugin needs to
               ! be selected.
               !   - http://maven.apache.org/plugins/maven-source-plugin/jar-mojo.html
               !   - http://maven.apache.org/plugins/maven-source-plugin/jar-no-fork-mojo.html
               !-->
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.4.0</version>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.5.0</version>
        <executions>
          <execution>
            <id>pom-flattening</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
            <configuration>
              <flattenMode>ossrh</flattenMode>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.16.1</version>
        <executions>
          <execution>
            <id>list-updates</id>
            <phase>validate</phase>
            <goals>
              <!--
               ! Do not check for dependency updates, because they are all managed.
              <goal>display-dependency-updates</goal>
               !-->
              <!--
               ! Do not check for parent updates, because this project has none.
              <goal>display-parent-updates</goal>
               !-->
              <goal>display-plugin-updates</goal>
              <goal>display-property-updates</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--:-:-:-:-:-:-:-:-:-:-:-:-:-:- [3/3] SITE LIFECYCLE -:-:-:-:-:-:-:-:-:-:-:-:-:-:-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.4.5</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>4.0.0-M10</version>
      </plugin>
    </plugins>
  </build>

</project>
