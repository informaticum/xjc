package de.informaticum.xjc.util;

import static java.util.Arrays.stream;
import java.io.StringWriter;
import java.util.Optional;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JFormatter;
import com.sun.codemodel.JGenerable;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JType;

/**
 * Util class (technically a non-instantiable enum container) to provide some helper functions according to {@code com.sun.codemodel.*} types.
 */
public enum CodeModelAnalysis {
    ;

    /**
     * Looks for a constructor that has the specified method signature and returns it.
     *
     * @param $Class
     *            the class to analyse
     * @param $argumentTypes
     *            the list of the constructor's argument types
     * @return an {@link Optional} holding the constructor if found; an {@linkplain Optional#empty() empty Optional} if not found
     */
    public static final Optional<JMethod> getConstructor(final JDefinedClass $Class, final JType... $argumentTypes) {
        final var $constructor = $Class.getConstructor($argumentTypes);
        if ($constructor != null) {
            return Optional.of($constructor);
        } else {
            final var $rawTypes = stream($argumentTypes).map(JType::erasure).toArray(JType[]::new);
            return Optional.ofNullable($Class.getConstructor($rawTypes));
        }
    }

    /**
     * Looks for a method that has the specified name/method signature and returns it.
     *
     * @param $Class
     *            the class to analyse
     * @param name
     *            the method name to look for
     * @param $argumentTypes
     *            the list of the method's argument types
     * @return an {@link Optional} holding the method if found; an {@linkplain Optional#empty() empty Optional} if not found
     */
    public static final Optional<JMethod> getMethod(final JDefinedClass $Class, final String name, final JType... $argumentTypes) {
        final var $method = $Class.getMethod(name, $argumentTypes);
        if ($method != null) {
            return Optional.of($method);
        } else {
            final var $rawTypes = stream($argumentTypes).map(JType::erasure).toArray(JType[]::new);
            return Optional.ofNullable($Class.getMethod(name, $rawTypes));
        }
    }

    /**
     * @param $component
     *            the requested code component
     * @return the according Java code (generated by the component itself)
     * @see JGenerable#generate(JFormatter)
     */
    public static final String render(final JGenerable $component) {
        final var out = new StringWriter();
        $component.generate(new JFormatter(out));
        return out.toString();
    }

}
