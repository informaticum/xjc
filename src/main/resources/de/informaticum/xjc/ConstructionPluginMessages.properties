OPTION_DESCRIPTION=Generates construction code, i.e., constructors, builders, clones.

DEFAULT_CONSTRUCTOR_DESCRIPTION=Generate default constructor. Default: false");
VALUES_CONSTRUCTOR_DESCRIPTION =Generate all-values constructor (automatically enables option ''{0}''). Default: false
BASIC_CONSTRUCTOR_DESCRIPTION  =Generate basic-values constructor, based on all required fields (automatically enables option ''{0}''). Default: false
COPY_CONSTRUCTOR_DESCRIPTION   =Generate copy constructor (automatically enables option ''{0}''). Default: false
HIDDEN_CONSTRUCTOR_DESCRIPTION =Hides default constructors if such constructor exists. Default: false
                                # TODO: According information for "default constructor is not hidden if similar to all-value/required-value constructor"
GENERATE_CLONE_DESCRIPTION     =Generate [{0}] method. (Before activating this option, think about your idea twice. \
                                For example, read Effective Java, 3rd edition, Item 13: Override clone judiciously. \
                                Further note, for some fields the current generic clone method may not return a perfect deep clone but a shallow clone.) \
                                Default: false
CONSTRUCTOR_INTRO       =<a href=\"https://github.com/informaticum/xjc\">Creates a new instance of this class.</a> In detail,
INJECT_SUPER_CONSTRUCTOR=the {0} constructor of the super class is called, and then
ASSIGN_ALL_FIELDS       =all declared fields are assigned in succession.
BLUEPRINT_ARGUMENT=the blueprint instance
INVALID_ARGUMENT_HANDLING=If any given value is '{'@code null'}' illegally, either the according default value will be assigned (if such value exists) or an according exception will be thrown.

PROTECTED_CONSTRUCTOR_JAVADOC=<em>Please note</em>: \
                              In order to increase code robustness, \
                              <a href=\"https://github.com/informaticum/xjc\">this constructor has been refactored by the informaticum''s XJC plugins</a> during the JAXB/XJC code generating process. \
                              In result, the accessibility has been reduced and, thus, the access modifier is '{'@code protected'}' now.
ALTERNATIVES_BEGIN      =In order to create instances of this class, use <ul>
ALTERNATIVES_CONSTRUCTOR=<li>any other constructor</li>
ALTERNATIVES_BUILDER    =<li>the '{'@linkplain {0} embedded builder'}'</li>
ALTERNATIVES_FACTORY    =<li>object factory</li>
ALTERNATIVES_END        =</ul>
                              
PROTECTED_CONSTRUCTOR_IMPLNOTE=@implNote Note, since JAX-B''s reflective instantiation bases on a default constructor, it has not been removed entirely. \
                                         Likewise, it cannot be set to '{'@code private'}' because the similarly kept sub-classes'' constructors must have access to this constructor.
                              # $constructor.javadoc().append("In order to create instances of this class, use any of the other constructors");
                              # final var $Builder = stream(clazz.implClass.listClasses()).filter(nested -> "Builder".equals(nested.name())).findFirst();
                              # if ($Builder.isPresent()) {
                              #     $constructor.javadoc().append(" or utilise the nested ").append($Builder.get());
                              # }
                              # $constructor.javadoc().append(".")
                              # ----- NOTE for ConstructionPlugin#runClass(...) ---
                              # GENERATE_BUILDER.doOnActivation(this::generateBuilder, clazz);
                              # [...]
                              # // Default-Constructor-Hiding must be called after Builder creation! (Otherwise JavaDoc misses reference on it.)
                              # HIDE_DEFAULT_CONSTRUCTOR.doOnActivation(this::hideDefaultConstructor, clazz);
                              